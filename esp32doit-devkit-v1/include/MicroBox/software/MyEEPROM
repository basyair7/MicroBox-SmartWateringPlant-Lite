/**
 *  @file MyEEPROM
 *  @version 1.0.0
 *  @brief A wrapper class for EEPROM operations, compatible with ESP and AVR platforms.
 *  @details This class provides template-based methods for reading, writing and saving specific
 *           program state using the EEPROM memory.
 * 
 *  @date 2025
 *  @author basyair7
 * 
 *  @copyright
 *  Copyright (C) 2025, basyair7
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  You should have received a copy of the GNU General Public License
 *  along with this program. If not, see <https://www.gnu.org/licenses/>
 */

#pragma once

#include <Arduino.h>
#include <EEPROM.h>
#include "variable"

class MyEEPROM {
    public:
        /**
         * @brief Initialize EEPROM for use. Required for ESP platforms.
         * @param size The size for the EEPROM to initialize (ESP only).
         * @return `true` if the operation succeeded (ESP32) or assumed success (ESP8266/AVR).
         */
        bool initialize(int size = 512) {
            #if defined(ESP32)
                // For ESP32, EEPROM.begin(size) returns a bool
                return EEPROM.begin(size);
            #elif defined(ESP8266)
                // For ESP8266, EEPROM.begin(size) returns void
                EEPROM.begin(size); return true; // Assume success as no error handling is available
            #else
                // For AVR platforms, no initialization is required
                return true;
            #endif
        }

        /**
         * @brief END the EEPROM session (ESP platforms only).
         */
        bool cleanup() const {
            #if defined(ESP32)
                EEPROM.end(); return true;
            #elif defined(ESP8266)
                return EEPROM.end();
            #else
                return false;
            #endif
        }

    public:
        /**
         * @brief Read a value for type T from EEPROM.
         * @tparam T The type of the value to read.
         * @param address The EEPROM address to read from.
         * @param val Reference to store the read value.
         * @return A reference to the read value.
         */
        template <typename T>
        T &get(const int address, T &val) const {
            return EEPROM.get(address, val);
        }

        /**
         * @brief Read a single byte from EEPROM.
         * @param address The EEPROM address to read from.
         * @return The byte read from EEPROM.
         */
        uint8_t read(const int address) const {
            return EEPROM.read(address);
        }

        /**
         * @brief Save a state to EEPROM.
         * @tparam T The type of the state to save.
         * @param address The EEPROM address to write to.
         * @param state The state value to save.
         * @return `true` if the operation succeeded, `false` otherwise.
         */
        template <typename T>
        bool save_state(const int address, const T &state) const {
            EEPROM.put(address, state);
            #if defined(ESP32) || defined(ESP8266)
                return EEPROM.commit();
            #else
                return true;
            #endif
        }

        /**
         * @brief Save the Wi-Fi mode state to EEPROM.
         * @tparam T The type of the state to save.
         * @param state the Blynk mode state to save.
         * @return `true` if the operation succeeded, `false` otherwise.
         */
        template <typename T>
        bool save_wifi_state(const T &state) const {
            return this->save_state(ADDR_EEPROM_WIFI_MODE, state);
        }
};